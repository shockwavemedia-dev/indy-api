<?php

declare(strict_types=1);

namespace App\Http\Resources;

use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;
use Illuminate\Pagination\LengthAwarePaginator;
use Symfony\Component\HttpFoundation\Response as ResponseAlias;

/**
 * @package Rex\Http\Resources
 */
abstract class Resource extends JsonResource
{
    /**
     * Return this resource as an array
     *
     * @noinspection PhpMissingParentCallCommonInspection
     *
     * @param Request $request
     *
     * @return string[]
     */
    public function toArray($request): array
    {
        return $this->getResponse();
    }

    /**
     * @noinspection ReturnTypeCanBeDeclaredInspection
     *
     * Create an HTTP response that represents the object
     * and set the status code and return type
     *
     * @param Request $request
     *
     * @return JsonResponse
     */
    public function toResponse($request): JsonResponse
    {
        return parent::toResponse($request)
            ->setStatusCode($this->getStatusCode())
            ->withHeaders([
                'Content-Type' => 'application/vnd.api+json',
            ]);
    }

    abstract protected function getResponse(): array;


    /**
     * The status code for responses generated by this resource
     */
    protected function getStatusCode(): int
    {
        return ResponseAlias::HTTP_OK;
    }

    public function paginationResource(LengthAwarePaginator $paginator): array
    {
        $nextPage = null;

        if ($paginator->nextPageUrl() !== null) {
            $nextPage = \sprintf(
                '?size=%s&page_number=%s',
                $paginator->perPage(),
                $paginator->currentPage() + 1
            );
        }

        $previousPageUrl = null;

        if ($paginator->onFirstPage() === false) {
            $previousPageUrl = \sprintf(
                '?size=%s&page_number=%s',
                $paginator->perPage(),
                $paginator->currentPage() - 1,
            );
        }

        $lastPageUrl = null;

        if ($paginator->lastPage() > 1) {
            $lastPageUrl = \sprintf(
                '?size=%s&page_number=%s',
                $paginator->perPage(),
                $paginator->lastPage(),
            );
        }

        $firstPageUrl = \sprintf(
            '?size=%s&page_number=%s',
            $paginator->perPage(),
            1,
        );

        return [
            'from' => $paginator->firstItem(),
            'to' => $paginator->lastItem(),
            'current_page' => $paginator->currentPage(),
            'next_page_url' => $nextPage,
            'last_page' => $paginator->lastPage(),
            'per_page' => $paginator->perPage(),
            'last_page_url' => $lastPageUrl,
            'first_page_url' => $firstPageUrl,
            'previous_page_url' => $previousPageUrl,
            'total' => $paginator->total(),
        ];
    }
}
